	
	***** MVC.txt *****
	p556~
	Plain Old Java Object
	
	* Model 1 방식

					 -요청-> 
		[클라이언트] 		 [JSP]  <->  [DB]
					 <-응답- 
		
		=> JSP 페이지에서 처리(DB처리,비즈니스로직),
		   JSP 페이지에서 화면 출력

	* Model 2 방식 (MVC 패턴)
		
					 -요청->					|
		[클라이언트]		 [Controller]	<->	|  [Model]   <->   [DAO]   <->   [DB]
					 		  (Servlet)			|   (Java)
							/
						[View]
						 (JSP)
						 
	p567~
					 -요청->						 |
		[클라이언트]		 [FrontController]	 <-> |  [Controller]   <->   [Model(DAO)]   <->   [DB]
					 		  (Servlet)			   	 |   (Java)
							/
						[View]
						 (JSP)
	
	* MVC : Model, View, Controller 를 사용한 개발 패턴
		=> 관심사의 분리 (분업) => 좋은 코드를 작성
		=> 각각의 동작을 수행해야함
		
	----------- 20240725 ----------
	Controller 생성 - doGet,doPost --> doProcess
	
	web.xml 이용하여 서블릿매핑 (@WebServlet("/url")
		<servlet>
	  		<servlet-name>MemberFrontController</servlet-name>
	  		<servlet-class>com.itwillbs.member.action.MemberFrontController</servlet-class>
	  	</servlet>
	  
	  	<servlet-mapping>
	  		<servlet-name>MemberFrontController</servlet-name>
	  		<url-pattern>*.me</url-pattern>
	  	</servlet-mapping>
	
	주소전달방식 정하기 위한 객체 생성
	
	start.jsp로 가상주소 보내기
	-------------------	
		
	* 상대주소
	./MemberLogin.me (가상주소)
	 => ./ 의 의미 : /MVC6 (프로젝트명)
	 
	./member/loginForm.jsp (실제주소)
	 => ./ 의 의미 : /webapp (webapp 폴더)
	 
	---------- 20240726 ----------
		start.jsp
		    |
	./MemberJoin.me 이동
			|
		web.xml (매핑체크)
			|
	MemberFrontController
	doGet/doPost
		=> doProcess 실행 1) 가상주소 계산
						  2) 가상주소 매핑
						  	2-1) 패턴 1 : DB처리 X, 페이지이동
						  	2-2) 패턴 2 : DB처리 O, 페이지이동
						  				 => MemberJoinAction 객체
						  				 	전달정보 저장
						  				 	DB처리 => MemberDAO 객체
						  3) 가상주소 이동
						  
	-------------------
	
	* 게시판(CRUD) 만들기
		
		- 글쓰기
			=> 사용자가 정보를 입력해서 DB에 저장
			
		- 글 리스트(목록) 조회
			+ 페이징처리
			1) 한번에 내용(글)을 원하는 만큼만 가져오기
			2) 페이지 블록 계산
			3) 특정페이지 이동 후 다시 리스트 이동할 때 이전의 페이지 정보를 기억
		
		- 글 본문 조회
		
		- 글 정보 수정
		
		- 글 정보 삭제
		
		- 답글 쓰기
			* 답글 알고리즘
			
			re_ref : 그룹번호
					일반글 작성시 bno 와 동일한 값, 답글작성시 부모글에 ref 과 동일한 형태
			re_lev : 레벨값(들여쓰기)
					일반글 작성시 0, 답글 작성 부모글 lev + 1
			re_seq : 글 순서
					일반글 작성시 0, 답글 작성 부모글 lev + 1
			
			bno				subject				ref			lev			seq
			----------------------------------------------------------------
			1				일반1				1			 0			 0
			2				일반2				2			 0			 0
			3				일반3				3			 0			 0
			4				답글3-1				3			 1			 1
			5				답글3-1-1			3			 2			 2
			6				답글3-2				3			 1			 1
			
			
			ref -> DESC & seq -> ASC
			
			bno				subject				ref			lev			seq
			----------------------------------------------------------------
			8				일반4				 8			 0			 0
			11 				>답글4-3			 8			 1			 1
			14				>>답글4-3-2			 8			 2			 2
			13				>>답글4-3-1			 8			 2			 2+1
			10				>답글4-2			 8			 1			 1+1+1+1	
			9				>답글4-1			 8			 1			 1+1+1+1+1
			12				>>답글4-1-1			 8			 2			 4+1+1			
			3				일반3				 3 			 0			 0
			6				>답글3-2			 3			 1 			 1
			7				>>답글3-2-1			 3			 2			 2
			4				>답글3-1			 3		 	 1		 	 1+1=2+1=3						
			5				>>답글3-1-1			 3			 2			 2+1=3+1=4			
			2				일반2				 2			 0			 0
			1				일반1				 1			 0			 0
			
			
						
						
		- 첨부파일 업로드/다운로드
			----- 2024-08-21 -----
			p.305 파일업로드
			
			<form action="./BoardFileWriteAction.bo" method="post" enctype="multipart/form-data">
			- 전달 방식은 반드시 POST방식
			- enctype="multipart/form-data" 설정
			(위 속성이 없는 경우는 파일의 이름만 전달하게 됨)
			
			<input type="file" name="file" accept="image/*">
			- name 속성 사용하여 파라메터값을 전달
			- accept="image/*" 사용자로부터 특정 파일만 업로드 제한
			
			* 브라우저에서는 파일의 확장자는 체크하지 않음
			
			미디어 타입(Multipurpose Internet Mail Extensions 또는 MIME type(IANA 미디어 타입))은 
			다양한 유형의 정보를 식별하기 위한 표준입니다
			
			https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types
		
	---------- 2024-08-06 ----------
	
	* IPv6 -> IPv4 설정 변경
	프로젝트 이름 우클릭 -> run as -> run configuration
	-> tomcat 선택 후 -> argument 탭 -> VM argument 에 -Djava.net.preferIPv4Stack=true 내용 입력
	-> apply & run
	
	
	* 커넥션풀 ( Connection Pool ) : DB 연결 정보를 사용하고나서 반납 (P.443)
	
	1) service() 메서드 실행시 1개씩 커넥션 풀 할당
	2) 커넥션의 개수를 제한
	3) 커넥션 객체를 모두 사용하고나면 자원 회수(반납)
	
		브라우저 요청 	->  사용가능한 커넥션 여부 체크┐ 
	./BoardWriteAction.bo							   └ O -> 커넥션 할당 -> 객체 사용 -> 객체 반납
													   └ X -> 일단 대기(반납될 때까지||설정된 시간)
													           └ 커넥션 반납O -> 커넥션 할당 -> 객체 사용 -> 객체 반납
													           └ 커넥션 반납X -> 커넥션 임시생성 -> 객체 사용 -> 객체 반납(소멸)
	./META_INF/context.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<Context>
		<Resource 
			name="jdbc/MVC" 								// 리소스이름
			auth="Container" 								// 자원 관리자
			type="javax.sql.DataSource" 					// 전달된 데이터 타입(자바)
			driverClassName="com.mysql.cj.jdbc.Driver"		// 드라이버 주소
			username="root" 								// DB 아이디
			password="1234"									// DB 비밀번호
			url="jdbc:mysql://localhost:3306/jspdb"			// DB 주소
			maxWait="5000"									// 커넥션 대기시간(ms)
		/>
	</Context>
	
	collection, dbcp, commons_pool -> download
	(https://commons.apache.org/)
		
	
	---------- 2024-08-22 ----------
	
	git : 분산 버전관리 프로그램 (형상관리도구)
	
	- repository : 저장소(폴더안에 파일을 관리)
	- untracked : git 이력관리 대상에서 제외
	- tracked : git 이력관리 대상으로 설정
	- staged : git 이력상태를 저장
	- unstaged : git 이력관리 대상이나, 아직 저장되지않은 상태
	
	> $ git init : 저장소 초기화
	> $ git config --global user.email "이메일주소" : 깃허브 로그인 이메일
	> $ git config --global user.name "이름" : 깃허브 프로필 이름
	> $ git status
	> 폴더에 1.txt 파일 생성
	> $ git status
	> $ git add 1.txt
		git add [untracked 상태 파일명]
		-> 파일의 상태를 tracked 상태로 변경
	> $ git status
	> Changes to be committed: new file: 1.txt
	> $ git rm --cached 1.txt
		git rm --cached [tracked 상태 파일명]
		-> tracked 상태의 파일 제거(untracked 상태로 변경)
	> $ git status
	> Untracked files
	> $ git add 1.txt
	> $ git status
	> Changes to be committed: new file: 1.txt
	> $ git commit -m "커밋 메시지"
	> git log
	> git log --oneline
	> git log --oneline --all --graph
	> git checkout -
		
	---------- 2024-08-23 ------------
	> $ git remote add origin (원격깃허브 주소) : 로컬 저장소-원격 저장소 연결
	> $ git push origin master : 원격 저장소로 정보를 보내기
	> $ git pull origin master : 원격 저장소에서 정보를 내려받기
	> $ git clone (원격깃허브 주소) : 원격 저장소 복사
	
		
	